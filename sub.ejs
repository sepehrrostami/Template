<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= data && data.email ? data.email : 'User' %> - Subscription Panel</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&display=swap">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Vazir:wght@300;400;500;700&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #8B00FF 0%, #00DDEB 100%);
            --secondary-gradient: linear-gradient(135deg, #FF007A 0%, #00DDEB 100%);
            --success-gradient: linear-gradient(135deg, #00FF7F 0%, #39FF14 100%);
            --warning-gradient: linear-gradient(135deg, #FF4500 0%, #FFA500 100%);
            --danger-gradient: linear-gradient(135deg, #FF0000 0%, #FF4040 100%);
            --disabled-gradient: linear-gradient(135deg, #4B4B4B 0%, #808080 100%);
            --background-color: #0A0A0A;
            --card-background: rgba(20, 20, 20, 0.9);
            --glass-background: rgba(40, 40, 40, 0.6);
            --text-primary: #E0E0E0;
            --text-secondary: #00DDEB;
            --text-tertiary: #8B00FF;
            --border-radius: 10px;
            --box-shadow: 0 0 15px rgba(139, 0, 255, 0.5), 0 0 25px rgba(0, 221, 235, 0.3);
            --glow-effect: 0 0 10px rgba(255, 0, 122, 0.8), 0 0 20px rgba(0, 221, 235, 0.6);
            --transition-fast: 0.2s;
            --transition-normal: 0.3s;
            --blur-sm: 5px;
        }

        [data-theme="dark"] {
            --background-color: #1A1A1A;
            --card-background: rgba(30, 30, 30, 0.9);
            --glass-background: rgba(50, 50, 50, 0.6);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Orbitron', sans-serif;
            background: var(--background-color);
            background-image: linear-gradient(135deg, rgba(139, 0, 255, 0.1) 0%, rgba(0, 221, 235, 0.1) 100%);
            background-size: 200% 200%;
            animation: cyberShift 15s infinite alternate ease-in-out;
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1.5rem;
            transition: all var(--transition-normal) ease;
        }

        body[lang="fa"] {
            font-family: 'Vazir', sans-serif;
            direction: rtl;
        }

        @keyframes cyberShift {
            0% { background-position: 0% 50%; }
            100% { background-position: 100% 50%; }
        }

        .container {
            width: 100%;
            max-width: 520px;
        }

        .card {
            background: var(--card-background);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            overflow: hidden;
            padding: 1.5rem;
            backdrop-filter: blur(var(--blur-sm));
            border: 1px solid rgba(139, 0, 255, 0.3);
            animation: pulseGlow 2s infinite alternate;
        }

        @keyframes pulseGlow {
            0% { box-shadow: var(--box-shadow); }
            100% { box-shadow: var(--glow-effect); }
        }

        .card-header {
            padding: 1rem 0;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .card-title {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        h1 {
            font-size: 2rem;
            font-weight: 700;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 10px rgba(139, 0, 255, 0.5);
        }

        .username {
            font-size: 1rem;
            color: var(--text-secondary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .info-item {
            background: var(--glass-background);
            border-radius: var(--border-radius);
            padding: 1rem;
            transition: all var(--transition-normal) ease;
            border: 1px solid rgba(0, 221, 235, 0.2);
        }

        .info-item:hover {
            transform: translateY(-5px);
            box-shadow: var(--glow-effect);
        }

        .info-label {
            font-size: 0.75rem;
            font-weight: 500;
            color: var(--text-tertiary);
            margin-bottom: 0.5rem;
            text-transform: uppercase;
        }

        .info-value {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--text-secondary);
        }

        .download-section {
            margin-top: 1.5rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            background: var(--secondary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 1rem;
            text-shadow: 0 0 8px rgba(255, 0, 122, 0.5);
        }

        .platforms-container {
            background: var(--glass-background);
            border-radius: var(--border-radius);
            padding: 1rem;
            border: 1px solid rgba(255, 0, 122, 0.2);
        }

        .platforms-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            justify-content: space-between;
        }

        .platform-card {
            flex: 1;
            min-width: 90px;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-decoration: none;
            color: var(--text-primary);
            padding: 0.75rem;
            background: var(--glass-background);
            border-radius: var(--border-radius);
            transition: all var(--transition-normal) ease;
        }

        .platform-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--glow-effect);
        }

        .platform-icon {
            font-size: 2.5rem;
            background: var(--secondary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }

        .platform-card span {
            font-size: 0.875rem;
            font-weight: 500;
        }

        .theme-toggle, .lang-toggle {
            background: var(--glass-background);
            border: none;
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: var(--text-secondary);
            transition: all var(--transition-normal) ease;
        }

        .theme-toggle:hover, .lang-toggle:hover {
            color: #FF007A;
            transform: rotate(30deg);
            box-shadow: var(--glow-effect);
        }

        .links-section {
            margin-top: 1.5rem;
        }

        .accordion {
            background: var(--glass-background);
            border-radius: var(--border-radius);
            overflow: hidden;
            border: 1px solid rgba(139, 0, 255, 0.2);
        }

        .accordion-header {
            padding: 1rem;
            cursor: pointer;
            background: var(--primary-gradient);
            color: white;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all var(--transition-normal) ease;
        }

        .accordion-header:hover {
            box-shadow: var(--glow-effect);
        }

        .accordion-header::after {
            content: "▼";
            font-size: 0.75rem;
            transition: transform var(--transition-normal) ease;
        }

        .accordion-header.active::after {
            transform: rotate(180deg);
        }

        .accordion-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height var(--transition-normal) ease;
            padding: 0 1rem;
        }

        .accordion-content.active {
            padding: 1rem;
            max-height: 500px;
        }

        .links-list {
            list-style: none;
            display: grid;
            gap: 0.75rem;
        }

        .link-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: var(--glass-background);
            padding: 0.75rem;
            border-radius: var(--border-radius);
            transition: all var(--transition-normal) ease;
            border: 1px solid rgba(0, 221, 235, 0.2);
        }

        .link-item:hover {
            transform: translateY(-3px);
            box-shadow: var(--glow-effect);
        }

        .link-item input {
            flex tundra: 1;
            background: transparent;
            border: none;
            color: var(--text-secondary);
            font-size: 0.875rem;
            padding: 0.25rem;
            outline: none;
        }

        .link-item button {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all var(--transition-fast) ease;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .copy-button {
            background: var(--primary-gradient);
            color: white;
        }

        .copy-button:hover {
            box-shadow: var(--glow-effect);
        }

        .qr-button {
            background: var(--secondary-gradient);
            color: white;
        }

        .qr-button:hover {
            box-shadow: var(--glow-effect);
        }

        .qr-popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--card-background);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            backdrop-filter: blur(var(--blur-sm));
            border: 1px solid rgba(255, 0, 122, 0.3);
            z-index: 1000;
        }

        .qr-close-button {
            text-align: right;
            margin-bottom: 0.5rem;
        }

        .qr-close-button button {
            background: var(--danger-gradient);
            color: white;
            border: none;
            border-radius: 50 queues%;
            width: 1.5rem;
            height: 1.5rem;
            cursor: pointer;
            font-weight: 600;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <% function formatBytes(bytes, decimals=2) { 
        if (!bytes || bytes === 0) return '∞'; 
        const k = 1024; 
        const dm = decimals < 0 ? 0 : decimals; 
        const sizesEn = ['Bytes', 'KB', 'MB', 'GB', 'TB']; 
        const sizesFa = ['بایت', 'کیلوبایت', 'مگابایت', 'گیگابایت', 'ترابایت']; 
        const i = Math.floor(Math.log(bytes) / Math.log(k)); 
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + (document.body.lang === 'fa' ? sizesFa[i] : sizesEn[i]); 
    } %>

    <% function formatRemainingTime(expiryTime) { 
        if (expiryTime === undefined || expiryTime === null || expiryTime === 0) return document.body.lang === 'fa' ? "نامحدود" : "Unlimited"; 
        const expiryTimeNum = parseInt(expiryTime, 10); 
        if (isNaN(expiryTimeNum)) return document.body.lang === 'fa' ? "نامعتبر" : "Invalid"; 
        const currentTime = Date.now(); 
        if (expiryTimeNum > currentTime) { 
            const remaining = expiryTimeNum - currentTime; 
            const days = Math.floor(remaining / (1000 * 60 * 60 * 24)); 
            const hours = Math.floor((remaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); 
            const minutes = Math.floor((remaining % (1000 * 60 * 60)) / (1000 * 60)); 
            let result = []; 
            if (days > 0) result.push(`${days} ${document.body.lang === 'fa' ? 'روز' : 'days'}`); 
            if (hours > 0) result.push(`${hours} ${document.body.lang === 'fa' ? 'ساعت' : 'hours'}`); 
            if (minutes > 0) result.push(`${minutes} ${document.body.lang === 'fa' ? 'دقیقه' : 'mins'}`); 
            return result.join(document.body.lang === 'fa' ? " و " : ", ") || (document.body.lang === 'fa' ? "کمتر از یک دقیقه" : "Less than a minute"); 
        } 
        return document.body.lang === 'fa' ? "منقضی شده" : "Expired"; 
    } %>

    <% function getConnectionTitle(link) { 
        if (!link || typeof link !== 'string') return 'Unnamed'; 
        const protocolMatch = link.match(/^(vmess|vless|shadowsocks|trojan):\/\//i); 
        const protocol = protocolMatch ? protocolMatch[1].toLowerCase() : null; 
        if (protocol === 'vmess') { 
            try { 
                const base64Data = link.split('://')[1].split('#')[0].split('?')[0]; 
                const decodedData = JSON.parse(atob(decodeURI(base64Data))); 
                return decodedData.ps || 'Unnamed'; 
            } catch (e) { 
                console.error("Error parsing vmess:", e); 
                return 'Unnamed'; 
            } 
        } else { 
            const parts = link.split('#'); 
            if (parts.length < 2) return 'Unnamed'; 
            let title = parts[1].split('?')[0]; 
            try { 
                title = decodeURIComponent(title); 
            } catch (e) { 
                console.error(e); 
            } 
            title = title.replace(/[,\-–_]\s*(\d+D)?\s*(\d+H)?\s*(\d+M)?/gi, '').trim(); 
            return title || 'Unnamed'; 
        } 
    } %>
</head>

<body data-theme="dark" lang="en">
    <div class="container">
        <div class="card">
            <div class="card-header">
                <div class="card-title">
                    <h1 data-lang="subscription">Subscription</h1>
                    <div>
                        <button class="theme-toggle" id="themeToggle" aria-label="Toggle Theme">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <circle cx="12" cy="12" r="5"></circle>
                                <line x1="12" y1="1" x2="12" y2="3"></line>
                                <line x1="12" y1="21" x2="12" y2="23"></line>
                                <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
                                <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
                                <line x1="1" y1="12" x2="3" y2="12"></line>
                                <line x1="21" y1="12" x2="23" y2="12"></line>
                                <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
                                <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
                            </svg>
                        </button>
                        <button class="lang-toggle" id="langToggle" aria-label="Toggle Language">
                            <i class="fas fa-globe"></i>
                        </button>
                    </div>
                </div>
                <div class="username">
                    <i class="fas fa-user-astronaut"></i> <%= data && data.email ? data.email : 'Unknown User' %>
                </div>
            </div>
            <div class="card-body">
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label" data-lang="status">Status</div>
                        <div class="info-value"><%= data && data.enable !== undefined ? (data.enable ? 'Active' : 'Disabled') : 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label" data-lang="dataLimit">Data Limit</div>
                        <div class="info-value"><%= data && data.total !== undefined ? formatBytes(data.total) : 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label" data-lang="dataUsed">Data Used</div>
                        <div class="info-value"><%= data && data.up !== undefined && data.down !== undefined ? formatBytes(data.up + data.down) : 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label" data-lang="expiration">Expiration</div>
                        <div class="info-value"><%= data && data.expiryTime !== undefined ? formatRemainingTime(data.expiryTime) : 'N/A' %></div>
                    </div>
                </div>

                <div class="download-section">
                    <h2 class="section-title" data-lang="downloadV2ray">Download V2Ray</h2>
                    <div class="platforms-container">
                        <div class="platforms-grid">
                            <a href="<%= data && data.suburl ? 'v2rayng://install-config?url=' + data.suburl : '#' %>" class="platform-card android">
                                <i class="fab fa-android platform-icon"></i>
                                <span data-lang="android">Android</span>
                            </a>
                            <a href="https://github.com/2dust/v2rayN/releases/download/7.10.5/v2rayN-windows-64.zip" class="platform-card windows">
                                <i class="fab fa-windows platform-icon"></i>
                                <span data-lang="windows">Windows</span>
                            </a>
                            <a href="https://github.com/MatsuriDayo/nekoray/releases/download/4.0.1/nekoray-4.0.1-2024-12-12-linux64.zip" class="platform-card linux">
                                <i class="fab fa-linux platform-icon"></i>
                                <span data-lang="linux">Linux</span>
                            </a>
                            <a href="<%= data && data.suburl ? 'streisand://install-config?url=' + data.suburl : '#' %>" class="platform-card ios">
                                <i class="fab fa-apple platform-icon"></i>
                                <span data-lang="ios">iOS</span>
                            </a>
                        </div>
                    </div>
                </div>

                <% if (data && data.enable && data.suburl_content) { %>
                <div class="links-section">
                    <h2 class="section-title" data-lang="configLinks">Config Links</h2>
                    <div class="accordion">
                        <div class="accordion-header" id="accordionToggle" data-lang="showLinks">Show Links</div>
                        <div class="accordion-content" id="accordionContent">
                            <ul class="links-list">
                                <% try { 
                                    const decodedFromBase64 = Buffer.from(data.suburl_content, 'base64').toString('utf-8'); 
                                    const linksArray = decodedFromBase64.split('\n').filter(link => link.trim() !== ''); 
                                    linksArray.forEach(link => { %>
                                <li class="link-item">
                                    <input type="text" value="<%= getConnectionTitle(link) %>" readonly>
                                    <button class="copy-button" onclick="copyLink('<%= link %>', this)"><i class="fas fa-copy"></i> <span data-lang="copy">Copy</span></button>
                                    <button class="qr-button" data-link="<%= link %>"><i class="fas fa-qrcode"></i> <span data-lang="qr">QR</span></button>
                                </li>
                                <% }); %>
                                <% } catch (e) { %>
                                <li class="link-item">Error loading config links</li>
                                <% console.error('Error decoding suburl_content:', e); %>
                                <% } %>
                            </ul>
                        </div>
                    </div>
                </div>
                <% } %>
            </div>
        </div>
    </div>

    <div class="qr-popup" id="qrPopup">
        <div class="qr-close-button">
            <button onclick="closeQrPopup()">X</button>
        </div>
        <div id="qrCodeContainer"></div>
    </div>

    <script>
        const translations = {
            en: {
                subscription: "Subscription",
                status: "Status",
                dataLimit: "Data Limit",
                dataUsed: "Data Used",
                expiration: "Expiration",
                downloadV2ray: "Download V2Ray",
                android: "Android",
                windows: "Windows",
                linux: "Linux",
                ios: "iOS",
                configLinks: "Config Links",
                showLinks: "Show Links",
                copy: "Copy",
                qr: "QR",
                copied: "Copied",
                active: "Active",
                disabled: "Disabled",
                unlimited: "Unlimited",
                invalid: "Invalid",
                expired: "Expired"
            },
            fa: {
                subscription: "اشتراک",
                status: "وضعیت",
                dataLimit: "محدودیت داده",
                dataUsed: "داده مصرف‌شده",
                expiration: "انقضا",
                downloadV2ray: "دانلود V2Ray",
                android: "اندروید",
                windows: "ویندوز",
                linux: "لینوکس",
                ios: "آی‌اواس",
                configLinks: "لینک‌های پیکربندی",
                showLinks: "نمایش لینک‌ها",
                copy: "کپی",
                qr: "کیوآر",
                copied: "کپی شد",
                active: "فعال",
                disabled: "غیرفعال",
                unlimited: "نامحدود",
                invalid: "نامعتبر",
                expired: "منقضی شده"
            }
        };

        const themeToggle = document.getElementById('themeToggle');
        const langToggle = document.getElementById('langToggle');
        const body = document.body;

        function updateLanguage(lang) {
            body.setAttribute('lang', lang);
            document.querySelectorAll('[data-lang]').forEach(element => {
                const key = element.getAttribute('data-lang');
                element.textContent = translations[lang][key];
            });
            // Update dynamic values
            document.querySelectorAll('.info-value').forEach((el, index) => {
                if (index === 0) el.textContent = <%= data && data.enable !== undefined ? (data.enable ? 'translations[lang].active' : 'translations[lang].disabled') : '"N/A"' %>;
                if (index === 1) el.textContent = <%= data && data.total !== undefined ? 'formatBytes(data.total)' : '"N/A"' %>;
                if (index === 2) el.textContent = <%= data && data.up !== undefined && data.down !== undefined ? 'formatBytes(data.up + data.down)' : '"N/A"' %>;
                if (index === 3) el.textContent = <%= data && data.expiryTime !== undefined ? 'formatRemainingTime(data.expiryTime)' : '"N/A"' %>;
            });
        }

        themeToggle.addEventListener('click', () => {
            if (body.getAttribute('data-theme') === 'dark') {
                body.setAttribute('data-theme', 'light');
                themeToggle.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>`;
            } else {
                body.setAttribute('data-theme', 'dark');
                themeToggle.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>`;
            }
        });

        langToggle.addEventListener('click', () => {
            const currentLang = body.getAttribute('lang');
            const newLang = currentLang === 'en' ? 'fa' : 'en';
            updateLanguage(newLang);
        });

        function copyLink(link, button) {
            navigator.clipboard.writeText(link);
            const lang = body.getAttribute('lang');
            button.querySelector('span').textContent = translations[lang].copied;
            setTimeout(() => { button.querySelector('span').textContent = translations[lang].copy; }, 1500);
        }

        const qrButtons = document.querySelectorAll('.qr-button');
        const qrPopup = document.getElementById('qrPopup');
        const qrCodeContainer = document.getElementById('qrCodeContainer');

        qrButtons.forEach((qrButton) => {
            qrButton.addEventListener('click', () => {
                const link = qrButton.dataset.link;
                qrCodeContainer.innerHTML = '';
                new QRCode(qrCodeContainer, {
                    text: link,
                    width: 200,
                    height: 200,
                    correctLevel: QRCode.CorrectLevel.L
                });
                qrPopup.style.display = 'block';
            });
        });

        function closeQrPopup() {
            qrPopup.style.display = 'none';
        }

        const accordionToggle = document.getElementById('accordionToggle');
        const accordionContent = document.getElementById('accordionContent');

        accordionToggle.addEventListener('click', () => {
            const isActive = accordionContent.classList.contains('active');
            if (isActive) {
                accordionContent.classList.remove('active');
                accordionContent.style.maxHeight = '0';
                accordionToggle.classList.remove('active');
            } else {
                accordionContent.classList.add('active');
                accordionContent.style.maxHeight = accordionContent.scrollHeight + 'px';
                accordionToggle.classList.add('active');
            }
        });

        // Initialize with English
        updateLanguage('en');
    </script>
</body>

</html>
